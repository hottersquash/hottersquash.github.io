{"meta":{"title":"Life Records","subtitle":null,"description":null,"author":"byan","url":"https://hottersquash.github.io","root":"/"},"pages":[{"title":"分类","date":"2019-12-31T16:00:00.000Z","updated":"2024-03-31T10:01:15.490Z","comments":true,"path":"category/index.html","permalink":"https://hottersquash.github.io/category/index.html","excerpt":"","text":""},{"title":"错误页面","date":"2019-12-31T16:00:00.000Z","updated":"2024-03-31T10:01:15.488Z","comments":false,"path":"/404.html","permalink":"https://hottersquash.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2019-12-31T16:00:00.000Z","updated":"2024-03-31T10:01:15.490Z","comments":false,"path":"about/index.html","permalink":"https://hottersquash.github.io/about/index.html","excerpt":"","text":"关于我我是一个在命运长河里挣扎的小鱼，90后，目前是小白一枚。虽然心中不甘，但是目前确实是 Worst One 。目标是成为全栈工程师、系统架构师。虽然前路迷茫，但是我会一步一步往前走。 关于主题Hexo - LiveForCode 主题是根据 BNDong 的博客样式复制过来的，其中也借鉴了 Hexo - NexT 主题的样式。可能这个主题还有很多不尽人意的地方，在后续的阶段我会不断地完善，如果有关于主题的相关问题，欢迎联系我。"},{"title":"留言板","date":"2019-12-31T16:00:00.000Z","updated":"2024-03-31T10:01:15.491Z","comments":true,"path":"comment/index.html","permalink":"https://hottersquash.github.io/comment/index.html","excerpt":"","text":""},{"title":"赞赏","date":"2019-12-31T16:00:00.000Z","updated":"2024-03-31T10:01:15.491Z","comments":false,"path":"donate/index.html","permalink":"https://hottersquash.github.io/donate/index.html","excerpt":"","text":"如果喜欢我的博客，或者喜欢我的博客主题，可以考虑赞赏一下哦，非常感激！网站所需的服务器和 CDN 都是不小的开支，日常维护也需要大量精力。 你们的支持是我前进的最大动力！"},{"title":"友情链接","date":"2019-12-31T16:00:00.000Z","updated":"2024-03-31T10:01:15.492Z","comments":false,"path":"friend/index.html","permalink":"https://hottersquash.github.io/friend/index.html","excerpt":"","text":"欢迎各位朋友前来交换友链，本站友链接受以下类型的网站： 个人博客 公益组织等非盈利性网站 不接受广告、商业性网站，特殊情况除外 如果你的网站 一个月以上无法正常访问 将会被移除。"},{"title":"标签","date":"2019-12-31T16:00:00.000Z","updated":"2024-03-31T10:01:15.500Z","comments":true,"path":"tag/index.html","permalink":"https://hottersquash.github.io/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"记一次mysql远程访问权限问题.md","slug":"记一次mysql远程访问权限问题-md","date":"2024-04-21T08:32:32.000Z","updated":"2024-04-21T11:09:05.336Z","comments":true,"path":"2024/04/21/记一次mysql远程访问权限问题-md/","permalink":"https://hottersquash.github.io/2024/04/21/%E8%AE%B0%E4%B8%80%E6%AC%A1mysql%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98-md/","excerpt":"","text":"今天装mariadb，准备开ipv6远程访问mysql，按照网上教程用命令开启： 12grant all privileges on *.* to root@&quot;%&quot; identified by &quot;password&quot; with grant option;FLUSH PRIVILEGES; 结果死活连不上，一直以为是ipv6的问题导致失败，于是修改配置文件50-server.cnf的bind-address为:: 12[mysqld]bind-address = :: 重启mysql，结果还是连不上，最后无奈，把日志打开，发现一直报错 1Access denied for user &#x27;root&#x27;@&#x27;xxxxxxxx&#x27; (using password: YES) 登录mysql，查看用户表 1select host, password, user from mysql.user; 恍然大悟，是最开始的授权指令后面的identified by “password” 导致的root密码和root开始设置的密码混淆了 重新设置密码 1set password for ipv6test@&#x27;%&#x27; = password(&#x27;xxxxxxx&#x27;) 最后成功解决!!!","categories":[{"name":"编程","slug":"编程","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/"},{"name":"数据库","slug":"编程/数据库","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[]},{"title":"利用玩客云部署leanote打造个人笔记系统","slug":"玩客云/利用玩客云部署leanote打造个人笔记系统","date":"2024-03-31T10:30:48.447Z","updated":"2024-03-31T10:27:51.427Z","comments":true,"path":"2024/03/31/玩客云/利用玩客云部署leanote打造个人笔记系统/","permalink":"https://hottersquash.github.io/2024/03/31/%E7%8E%A9%E5%AE%A2%E4%BA%91/%E5%88%A9%E7%94%A8%E7%8E%A9%E5%AE%A2%E4%BA%91%E9%83%A8%E7%BD%B2leanote%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/","excerpt":"玩客云部署leanote打造个人笔记系统","text":"玩客云部署leanote打造个人笔记系统 1、玩客云刷好Armbian5.9系统，具体刷法参考下方链接 [玩客云刷机教程]: https://www.bilibili.com/video/BV1rF411V7Lt/?share_source=copy_web&amp;vd_source=c816ac75903f257baf237ee7014ef127 “玩客云 免拆&#x2F;拆机刷armbian +内网穿透ssh远程登录 +自动挂载硬盘 作为linux主机&#x2F;服务器” 最终效果如下图： 2、安装docker 123456# 更新软件包信息apt update# 安装dockerapt install docker -y# 查看docker版本,显示版本信息即为安装成功docker -v 3、利用docker安装arm32版的mongo，并配置相关volume 123456# 拉取mongo镜像docker pull apcheamitru/arm32v7-mongo# 创建mongo数据卷对应的物理文件夹，等会和容器做映射mkdir -p $HOME/mongo/data/db $HOME/mongo/data/configdb $HOME/mongo/data/log # 查看镜像docker images 4、下载lenanote的arm版本 官方github地址： http://sourceforge.net/projects/leanote-bin/files/2.6.1/leanote-linux-arm-v2.6.1.bin.tar.gz 度盘地址: https://pan.baidu.com/s/1HqO7776w2dygQgsr5B35Rg?pwd=zfc0 5、将mongo初始化文件cp到上面的volume目录 1234# 解压文件tar -xvf leanote-linux-arm-v2.6.1.bin.tar.gz# 复制mongo初始化文件到第3步创建的文件夹中 cp -r ./leanote/mongodb_backup/* $HOME/mongo/data/db/ 6、启动mongo容器 1234567891011# 启动容器docker run -itd --name mongo --restart=always --privileged -p 27017:27017 -v $HOME/mongo/data/db:/data/db -v $HOME/mongo/data/configdb:/data/configdb -v $HOME/mongo/data/log:/data/log apcheamitru/arm32v7-mongo:latest# 参数说明-p 端口映射，格式：物理机端口:容器端口-v 挂载数据卷，格式：物理机文件夹:容器文件夹--restart=always 挂掉自动重启--privileged 使容器拥有真正的root权限# 查看容器docker ps 7、进入容器，执行初始化脚本 12345678910111213# 进入容器docker exec -it mongo bash# 找到挂载数据卷目录cd /data/db# 导入数据mongorestore -h localhost -d leanote --dir leanote_install_data# 导出命令，备份的时候用# mongodump -h localhost -d leanote -o &lt;dir&gt; # 退出容器exit 8、运行leanote 1234# 运行sh leanote/bin/run.sh# 访问测试，默认是9000端口，具体配置见conf/app.confhttp://ip:9000/","categories":[{"name":"编程","slug":"编程","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"玩客云","slug":"玩客云","permalink":"https://hottersquash.github.io/tag/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"刷机","slug":"刷机","permalink":"https://hottersquash.github.io/tag/%E5%88%B7%E6%9C%BA/"}],"author":"hottersquash"},{"title":"BaiduPCS-Go更新脚本","slug":"BaiduPCS-Go更新脚本","date":"2024-03-31T10:29:38.000Z","updated":"2024-03-31T10:29:51.244Z","comments":true,"path":"2024/03/31/BaiduPCS-Go更新脚本/","permalink":"https://hottersquash.github.io/2024/03/31/BaiduPCS-Go%E6%9B%B4%E6%96%B0%E8%84%9A%E6%9C%AC/","excerpt":"","text":"BaiduPCS-Go更新脚本git链接：https://github.com/qjfoidnh/BaiduPCS-Go 更新脚本 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#! /bin/bash# 本地保存路径LOCAL_MUSIC_ROOT_PATH=&quot;/root/mydisk/software/navidrome/music/music&quot;# 远程路径REMOTE_MUSIC_ROOT_PATH=&quot;/apps/music&quot;# 程序所在路径EXEC_FILE_PATH=&quot;/root/mydisk/software/baiduPCS/BaiduPCS-Go&quot;# 遍历队列array[0]=&quot;different $REMOTE_MUSIC_ROOT_PATH $LOCAL_MUSIC_ROOT_PATH&quot;index=0# BFS获取差异文件数组function different()&#123; # 本地根目录 NOW_LOCAL_PATH=$&#123;2&#125; cd $&#123;NOW_LOCAL_PATH&#125; # 本地文件列表 NOW_LOCAL_ARRAY=(`ls -l | awk &#x27;&#123;print $9&#125;&#x27;`) # 远程根目录 NOW_REMOTE_PATH=$&#123;1&#125; $&#123;EXEC_FILE_PATH&#125; cd $&#123;NOW_REMOTE_PATH&#125; # 远程文件列表 NOW_REMOTE_ARRAY=(`$&#123;EXEC_FILE_PATH&#125; ls -l | awk &#x27;&#123;print $9&#125;&#x27;`) # 下载 for var in $&#123;NOW_REMOTE_ARRAY[*]&#125;: do # 远程文件路径 NOW_REMOTE_FILE=$&#123;NOW_REMOTE_PATH&#125;&quot;/&quot;$&#123;var&#125; # 本地文件路径 NOW_LOCAL_FILE=$&#123;NOW_LOCAL_PATH&#125;&quot;/&quot;$&#123;file&#125; echo &quot;$&#123;NOW_REMOTE_FILE&#125;&quot; # 是文件夹 if [ -d $&#123;NOW_REMOTE_FILE&#125; ]; then # 本地存在，加入队列 if [ -d $&#123;NOW_LOCAL_FILE&#125; ]; then array[$&#123;#array[@]&#125;]=&quot;diff $&#123;NOW_REMOTE_FILE&#125; $&#123;NOW_LOCAL_FILE&#125;&quot; else # 本地不存在直接开始下载 $&#123;EXEC_FILE_PATH&#125; d $&#123;NOW_REMOTE_FILE&#125; --saveto $&#123;NOW_LOCAL_PATH&#125; fi # 文件 else # 本地不存在 if [ ! -f $&#123;NOW_LOCAL_FILE&#125; ]; then $&#123;EXEC_FILE_PATH&#125; d $&#123;NOW_REMOTE_FILE&#125; --saveto $&#123;NOW_LOCAL_PATH&#125; fi fi done # 上传 for var in $&#123;NOW_LOCAL_ARRAY[*]&#125;: do # 远程文件路径 NOW_REMOTE_FILE=$&#123;NOW_REMOTE_PATH&#125;&quot;/&quot;$&#123;var&#125; # 本地文件路径 NOW_LOCAL_FILE=$&#123;NOW_LOCAL_PATH&#125;&quot;/&quot;$&#123;file&#125; echo &quot;$&#123;NOW_REMOTE_FILE&#125;&quot; # 是文件夹 if [ -d $&#123;NOW_LOCAL_FILE&#125; ]; then # 云端不存在 if [ ! -d $&#123;NOW_REMOTE_FILE&#125; ]; then # 直接开始上传 $&#123;EXEC_FILE_PATH&#125; u $&#123;NOW_LOCAL_FILE&#125; fi # 文件 else # 云端不存在 if [ ! -f $&#123;NOW_REMOTE_FILE&#125; ]; then $&#123;EXEC_FILE_PATH&#125; u $&#123;NOW_LOCAL_FILE&#125; fi fi done&#125;# 开始遍历while ((index&lt;$&#123;#array[*]&#125;))do # 从命令列表中取出命令 command=$&#123;array[$&#123;index&#125;]&#125; let index+=1 echo &quot;当前执行命令：&quot;$&#123;command&#125; # 执行命令 eval $&#123;command&#125;done","categories":[{"name":"编程","slug":"编程","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"玩客云","slug":"玩客云","permalink":"https://hottersquash.github.io/tag/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"刷机","slug":"刷机","permalink":"https://hottersquash.github.io/tag/%E5%88%B7%E6%9C%BA/"}],"author":"hottersquash"},{"title":"联想潮5000蒙特雷黑苹果","slug":"玩客云/联想潮5000蒙特雷黑苹果","date":"2024-03-31T10:26:23.000Z","updated":"2024-03-31T10:30:14.817Z","comments":true,"path":"2024/03/31/玩客云/联想潮5000蒙特雷黑苹果/","permalink":"https://hottersquash.github.io/2024/03/31/%E7%8E%A9%E5%AE%A2%E4%BA%91/%E8%81%94%E6%83%B3%E6%BD%AE5000%E8%92%99%E7%89%B9%E9%9B%B7%E9%BB%91%E8%8B%B9%E6%9E%9C/","excerpt":"联想小新潮i5-7200u OC引导黑苹果Montery","text":"联想小新潮i5-7200u OC引导黑苹果Montery (请自行做好备份，数据无价，出现问题概不负责) 1、配置如下（设备名被改掉，不影响） 2、最终实现功能如下：触摸板、电池、蓝牙、wifi、亮度、锁屏唤醒、HDMI正常随航未知、睡眠未知（可能正常） 最终效果图如下： 3、EFI文件如下（基于参考链接中b站up主提供EFI修改而成）：链接：https://pan.baidu.com/s/1SIceTZcLBiDk6qhY-hj9DA提取码：nfkz 4、其他注意事项参考：黑苹果维护清单-黑果小兵潮5000 黑果EFI合集潮5000 黑果视频","categories":[{"name":"编程","slug":"编程","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"玩客云","slug":"玩客云","permalink":"https://hottersquash.github.io/tag/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"刷机","slug":"刷机","permalink":"https://hottersquash.github.io/tag/%E5%88%B7%E6%9C%BA/"}],"author":"hottersquash"},{"title":"玩客云编译comfast-cf-811ac-armhfv7版本驱动实现wifi上网","slug":"玩客云/玩客云编译comfast-cf-811ac-armhfv7版本驱动实现wifi上网","date":"2024-03-31T10:26:22.000Z","updated":"2024-03-31T10:30:17.899Z","comments":true,"path":"2024/03/31/玩客云/玩客云编译comfast-cf-811ac-armhfv7版本驱动实现wifi上网/","permalink":"https://hottersquash.github.io/2024/03/31/%E7%8E%A9%E5%AE%A2%E4%BA%91/%E7%8E%A9%E5%AE%A2%E4%BA%91%E7%BC%96%E8%AF%91comfast-cf-811ac-armhfv7%E7%89%88%E6%9C%AC%E9%A9%B1%E5%8A%A8%E5%AE%9E%E7%8E%B0wifi%E4%B8%8A%E7%BD%91/","excerpt":"玩客云下编译comfast cf-811ac驱动实现wifi上网","text":"玩客云下编译comfast cf-811ac驱动实现wifi上网 环境： 1、克隆源码，安装编译环境 1234# 克隆项目git clone https://github.com/brektrou/rtl8821CU.git# 安装编译环境sudo apt install gcc g++ build-essential git dkms 参考文章: [Linux安装comfast 811AC usb网卡驱动]: https://blog.csdn.net/mzjmzjmzjmzj/article/details/104725817 “Linux安装comfast 811AC usb网卡驱动” 2、安装linux-header文件 header文件地址: https://pan.baidu.com/s/1X-HmzyQHKUpe1-ZivJ_gjg?pwd=760r 1234567```bash # 安装头文件,安装完成 /usr/src会出现linux-headers-5.9.0-rc7-aml-s812文件夹dpkg -i linux-headers-current-aml-s812_20.11_armhf.deb# 创建文件夹mkdir -p /lib/modules/5.9.0-rc7-aml-s812/kernel# 复制文件到指定目录cp -r /usr/src/linux-headers-5.9.0-rc7-aml-s812/* /lib/modules/5.9.0-rc7-aml-s812/kernel/ 参考链接： 3、解决兼容性问题 12345sudo cp /lib/modules/5.9.0-rc7-aml-s812/build/arch/arm/Makefile /lib/modules/5.9.0-rc7-aml-s812/build/arch/arm/Makefile.0957sudo sed -i &#x27;s/-msoft-float//&#x27; /lib/modules/5.9.0-rc7-aml-s812/build/arch/arm/Makefilesudo ln -s /lib/modules/5.9.0-rc7-aml-s812/build/arch/arm /lib/modules/5.9.0-rc7-aml-s812/build/arch/armv7l 参考链接： https://github.com/brektrou/rtl8821CU https://github.com/fastoe/RTL8811CU_for_Raspbian 4、编译 1234567891011121314cd rtl8821CU-mastervim Makefile # 修改编译文件中两个参数如下：# CONFIG_PLATFORM_I386_PC=n# CONFIG_PLATFORM_ARM_RPI=y# wq保存，之后开始编译sudo make# 等待结束之后即可编译完成sudo make install# 重启机器sudo reboot# 检查是否安装成功，若出现8821cu.ko文件即表示安装完成ls /lib/modules/$(uname -r)/kernel/drivers/net/wireless/realtek/rtl8821cu 参考链接：同1 5、设置静态ip和启动wifi 12345打开armbian的图形化设置，先指定静态wifi的静态ip，然后拔掉网线，重启网络服务即可armbian-config# 重启网络服务/etc/init.d/networking restart 参考链接：https://blog.csdn.net/weixin_39988888/article/details/112128801","categories":[{"name":"编程","slug":"编程","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"玩客云","slug":"玩客云","permalink":"https://hottersquash.github.io/tag/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"刷机","slug":"刷机","permalink":"https://hottersquash.github.io/tag/%E5%88%B7%E6%9C%BA/"}],"author":"hottersquash"},{"title":"利用玩客云搭建个人博客hexo","slug":"玩客云/利用玩客云搭建个人博客hexo","date":"2024-03-31T10:26:21.000Z","updated":"2024-03-31T10:30:04.228Z","comments":true,"path":"2024/03/31/玩客云/利用玩客云搭建个人博客hexo/","permalink":"https://hottersquash.github.io/2024/03/31/%E7%8E%A9%E5%AE%A2%E4%BA%91/%E5%88%A9%E7%94%A8%E7%8E%A9%E5%AE%A2%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2hexo/","excerpt":"利用玩客云搭建个人博客hexo","text":"利用玩客云搭建个人博客hexo 1、玩客云刷好Armbian5.9系统，最终效果如下图： 2、安装nodejs，hexo12# 注意安装armv7版本的node 下载地址：https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-armv7l.tar.xz 其他步骤参考： 3、修改_config.yml文件部署到git上12345# 这里只截取关键配置，其他例如git的ssh访问自行百度deploy: type: git repo: git@github.com:hottersquash/hottersquash.github.io.git branch: main 4、最终效果图","categories":[{"name":"编程","slug":"编程","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"玩客云","slug":"玩客云","permalink":"https://hottersquash.github.io/tag/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"刷机","slug":"刷机","permalink":"https://hottersquash.github.io/tag/%E5%88%B7%E6%9C%BA/"}],"author":"hottersquash"},{"title":"利用玩客云搭建个人音乐服务器Navidrome","slug":"玩客云/利用玩客云搭建个人音乐服务器Navidrome","date":"2024-03-31T10:26:21.000Z","updated":"2024-03-31T10:30:07.467Z","comments":true,"path":"2024/03/31/玩客云/利用玩客云搭建个人音乐服务器Navidrome/","permalink":"https://hottersquash.github.io/2024/03/31/%E7%8E%A9%E5%AE%A2%E4%BA%91/%E5%88%A9%E7%94%A8%E7%8E%A9%E5%AE%A2%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9F%B3%E4%B9%90%E6%9C%8D%E5%8A%A1%E5%99%A8Navidrome/","excerpt":"","text":"玩客云利用Navidrome搭建个人音乐服务器需求简介：最近酷狗会员到期，发现年费涨价，舍不得钱，用闲着的玩客云搭建一个云服务听听歌。 一、简介​ Navidrome 是一开源的音乐服务器，可以用来自建云端音乐播放器，在网页听硬盘中存的歌曲，兼容 Subsonic、Aironic 播放器，支持跨平台，具体介绍见：https://www.appinn.com/navidrome/。 体验网站：https://demo.navidrome.org/ 账户密码：demo&#x2F;demo ​ 使用前提：拥有公网ip或者ipv6+域名， ​ 最终效果截图： 二、搭建教程1、安装docker 2、拉镜像，选择arm&#x2F;v7架构，镜像地址：https://hub.docker.com/r/deluan/navidrome 1docker pull deluan/navidrome:develop@sha256:d7610fc239c8e541db82d6bff59091d8f807310fd20a2cd96443ba421fbac588 3、创建数据文件夹 1mkdir ~/app/music/music ~/app/music/data 4、创建容器，启动容器 1234# 镜像重命名docker tag 镜像id 仓库名:tag# 启动docker run -d --name navidrome --restart=unless-stopped --user $(id -u):$(id -g) -v /root/mydisk/software/navidrome/music/music:/music -v /root/mydisk/software/navidrome/music/data:/data -p 4533:4533 -e ND_LOGLEVEL=info 镜像id 5、设置。在 ~&#x2F;app&#x2F;music&#x2F;music 路径下添加mp3音乐，浏览器输入***http:&#x2F;&#x2F;玩客云ip:4533&#x2F;***，即可（访问不了，检查防火墙、端口、容器日志），支持中文，个人设置。 6、跨平台。安卓推荐：Symfonium，安装之后选择添加Subsonic源，填上ip、端口、用户名密码，直接add Server即可（安装包在文尾），免费的推荐DSub 附件： Symfonium 安装包：链接：https://pan.baidu.com/s/15ZiTJWH51TZHoEaiJLP4sg?pwd=eqk3 Substracks安卓安装包：https://pan.baidu.com/s/1rHv9vTa0ujndBgBnjoONxA?pwd=jd05 DSub 安卓安装包： 链接：https://pan.baidu.com/s/1R5gIi8f1gpYKTSwR3KcPSQ?pwd=xt2g","categories":[{"name":"编程","slug":"编程","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"玩客云","slug":"玩客云","permalink":"https://hottersquash.github.io/tag/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"刷机","slug":"刷机","permalink":"https://hottersquash.github.io/tag/%E5%88%B7%E6%9C%BA/"}],"author":"hottersquash"},{"title":"利用Cloudflare+Nginx实现ipv4访问纯ipv6的各种服务","slug":"玩客云/利用Cloudflare+Nginx实现ipv4访问纯ipv6的各种服务","date":"2024-03-31T10:26:20.000Z","updated":"2024-03-31T10:30:00.828Z","comments":true,"path":"2024/03/31/玩客云/利用Cloudflare+Nginx实现ipv4访问纯ipv6的各种服务/","permalink":"https://hottersquash.github.io/2024/03/31/%E7%8E%A9%E5%AE%A2%E4%BA%91/%E5%88%A9%E7%94%A8Cloudflare+Nginx%E5%AE%9E%E7%8E%B0ipv4%E8%AE%BF%E9%97%AE%E7%BA%AFipv6%E7%9A%84%E5%90%84%E7%A7%8D%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"利用Cloudflare + Nginx + ddns-go 实现ipv4访问纯ipv6的服务器前提条件：ipv6 + 域名 一、需求描述​ 在公司（ipv4环境）想访问的家里的玩客云（ipv6环境）的笔记和音乐服务 二、实现原理：​ (这里用aab.cn域名举例，假设服务器提供两种服务：note笔记服务(端口9000)、music音乐服务(端口4533)) Cloudflare提供免费dns解析和代理功能，代理功能相当于一台同时具有ipv4&#x2F;ipv6的服务器帮你做中继转发。 ddns-go用来做域名和ipv6地址绑定上报 用不同子域名来区分各种服务： note.aab.cn对应note服务，music.aab.cn对应music服务 Cloudflare将访问aab.cn请求都打到服务器同一个端口8880上，服务器上用nginx统一监听该端口，根据子域名转发到匹配的服务端口。 三、实现步骤注意：1、 所有Cloudflare的操作不会立刻生效，都需要等一段时间！！！ ​ 2、Chrome没有Edge表现好，如果Chrome一直转圈圈，可以换Edge试试 具体步骤 1、注册Cloudflare，绑定域名，到域名提供商网站上去修改dns server（比如我的是阿里云，去阿里云域名管理里面修改即可） 参考：https://www.kuajingyuan.com/set-cloudflare-as-dns-server 2、获取授权令牌，安装ddns-go，设置ddns-go的域名记录上报，这里的子域名可以随便写（一个服务对应一个子域名），只要后面步骤nginx的配置文件能对应上就行。 具体步骤参考：https://zhuanlan.zhihu.com/p/581967733 3、等待域名上报生效，ddns-go配置成功后，应该会出现如下记录，然后逐个点亮那个云朵，开启代理功能。 4、设置回溯端口，统一将请求转发到服务器的同一个端口上 点击创建规则，点击保存，等待规则生效，现在完成了代理服务器的设置。规则如下图： 5、服务器开放防火墙8880端口，然后配置并重启nginx，配置中的子域名要和第2步中的上报域名一致，然后server中服务端口自定义即可。下面贴出nginx.conf配置： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657events &#123; worker_connections 768; # multi_accept on;&#125;http &#123; server_names_hash_bucket_size 64; client_max_body_size 0; server &#123; listen [::]:8880 ; server_name note.hottersquash.top; location / &#123; proxy_pass http://localhost:9001; &#125; &#125; server &#123; listen [::]:8880 ; server_name docker.hottersquash.top; location / &#123; proxy_pass http://localhost:9000; &#125; &#125; server &#123; listen [::]:8880 ; server_name nav.hottersquash.top; location / &#123; proxy_pass http://localhost:4533; &#125; &#125; server &#123; listen [::]:8880 ; server_name ql.hottersquash.top; location / &#123; proxy_pass http://localhost:5600; &#125; &#125; server &#123; listen [::]:8880 ; server_name hottersquash.top; location / &#123; proxy_pass http://localhost:8081; &#125; &#125; ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; &#125; 6、如果一切顺利，现在即可实现外网访问。 四、问题1、Cloudflare的速度着实很慢，所以只适合及时性不太高的任务。 2、如果想某个服务直接通过ipv6访问，不走代理，可以在步骤中的第3步不点亮那个云朵即可（我这边的ssh服务就不想走代理，所以没有点亮）。 本文参考文章：NAS那些事儿 篇一：纯IPV4访问纯IPV6且内网穿透","categories":[{"name":"编程","slug":"编程","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"玩客云","slug":"玩客云","permalink":"https://hottersquash.github.io/tag/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"刷机","slug":"刷机","permalink":"https://hottersquash.github.io/tag/%E5%88%B7%E6%9C%BA/"}],"author":"hottersquash"},{"title":"hexo部署脚本","slug":"hexo 部署脚本","date":"2024-03-31T09:23:38.000Z","updated":"2024-04-21T09:51:08.821Z","comments":true,"path":"2024/03/31/hexo 部署脚本/","permalink":"https://hottersquash.github.io/2024/03/31/hexo%20%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/","excerpt":"","text":"hexo 部署脚本（同步代码到master） 1234567891011121314151617181920#! /bin/bashhexo clean &amp;&amp; hexo generateecho &quot;生成html文件成功!&quot;if [[ &quot;$1&quot; == &quot;preview&quot; ]];then hexo server echo &quot;----------------------------------------&quot; exit 0fihexo clean &amp;&amp; hexo g -decho &quot;部署成功!&quot;git checkout main git add . git commit -am $&#123;0&#125;git push origin mainecho &quot;git同步成功!&quot;","categories":[{"name":"编程","slug":"编程","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"创建文章","slug":"创建文章","permalink":"https://hottersquash.github.io/tag/%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0/"}]}],"categories":[{"name":"编程","slug":"编程","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/"},{"name":"数据库","slug":"编程/数据库","permalink":"https://hottersquash.github.io/category/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"玩客云","slug":"玩客云","permalink":"https://hottersquash.github.io/tag/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"刷机","slug":"刷机","permalink":"https://hottersquash.github.io/tag/%E5%88%B7%E6%9C%BA/"},{"name":"创建文章","slug":"创建文章","permalink":"https://hottersquash.github.io/tag/%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0/"}]}